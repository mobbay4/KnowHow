# Docstrings

Out there are several styles for Python docstrings. For our purposes its important that sphinx can parse our docstrings, such that we can automaticly include the API in our documentation. It is recomended to use either the [Google style] or the [Numpy style] for docstrings, since they are also human-readable in the source code. In consequence on has a nice format in both in the docstring itself and in the documentation. Note that you need to use the [Napoleon] extension for Sphinx to use Google or Numpy style. To learn how to treat extensions in [Sphinx] please have a look at the [extensions] subsection. And to get more familiar with an autogenerated API-documentation have a look at the subsection: [API documentation].

## Doctest

One can also include tests, so-called [doctests], in the docstrings. This has to main advantages. First, of course on can test the code and second one has a working example of how to call the code written into the docstring. On this [doctests]-website several examples for docstrings can be found. Note that you need to add the `doctest` extension to your `conf.py`-file. This is useful if there is not much connection to the outside. If something like a control unit is included, it's not sensible to use this. A corresponding `make.bat`-file can look like:

```bat
if "%1"=="doctest" (
cd docs
make doctest -o +NORMALIZE_WHITESPACE
cd ..
goto end
)
```

This executes the examples in the documentation as "real code". The same logic applies to Docstrings.

So real code appears for example in form of so called `code-block`'s. Example:

```python
def example_function(a,b,minus = False):
    """
    This function does nothing else but adding a and b. You can also subtract a from b by setting `minus` to True.

        **Arguments**:
        a (int):
            First number
        b (int):
            Second number

        **Keyword Arguments**:
        minus (bool):
            if True: a-b
            else: a+b

        **Returns**:
        The result of the calculation

        **Example**:
        The most simple example would be:

        ..code-block:: python

            >>> a = 1
            >>> b = 2
            >>> c = example_function(a,b)
            >>> print(c)

    """
    if minus:
        return a-b
    else:
        return a+b
```

In this example, one would get the formatted docstring and the output of the code-block.

## Autogenerate Plots in the Documentation

The autogeneration of plots in the documentation is similar to the doctest module. So, one executes the code nessesary to generate the plot while generating the documentation and imediatly pastes it into the documentation. Comman compatible plotting packages are [plotly] and [matplotlib].

### sphinx_plot_directive

Example for **sphinx_plot_directive** ([matplotlib]):

```python
.. plot::

    >>> import matplotlib.pyplot as plt
    >>> x = [1,2,3,4]
    >>> y = [1,2,3,4]
    >>> plt.plot(x,y)
```

### sphinx-plotly-directive

```{note}
The  **sphinx-plotly-directive** does not support multi line statements of python code.
```

Example for **sphinx-plotly-directive** ([plotly]):

```python
.. plotly::

    >>> import plotly.express as px
    >>> import pandas as pd
    >>> df = pd.DataFrame(dict(x = [1, 3, 2, 4],y = [1, 2, 3, 4]))
    >>> fig = px.line(df, x="x", y="y", title="This is a plot")
    >>> fig.show()
```

% Markdown links
[API documentation]: content_management.md

% external links
[Google style]: <https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html>
[Numpy style]: <https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html?highlight=numpy>
[Napoleon]: <https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html>
[doctests]: <https://docs.python.org/3/library/doctest.html>
[matplotlib]: <https://matplotlib.org/devdocs/api/sphinxext_plot_directive_api.html>
[plotly]: <https://pypi.org/project/sphinx-plotly-directive/#description>
