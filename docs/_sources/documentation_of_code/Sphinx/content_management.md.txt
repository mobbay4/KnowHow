# Index files, Toc-Trees, API, and more

This chapter displays the different file-types occurring while using [Sphinx]. Therefore, each file type is explained once for a [.rst] file and once for a [Markdown] file. Note that the [Markdown] file-types use the [MySt] Sphinx-extension. Latter is a very nice extension for working with [Markdown] files in [Sphinx].

## index file

An `index` Ã­s a bit like a master file for managing contents. So, typically one has a master-`index`-file and separate `index`-files for every subfolder of the documentation. The master-`index`-file is used by [Sphinx] as an entry point to build the documentation from. Moreover, every document you want to include in your documentation has to be somehow included in this file.

To structure your documentation you use so-called `toctree`'s. Those tell [Sphinx] the order and structure of your documentation! The most simple toctree in [.rst] format looks like:

```rst
.. toctree::
   :maxdepth: 2

   folder1/file1
   file2
   file3
```

Or in [Markdown] language:

````md
```{toctree}
:maxdepth: 2

folder1/file1
file2
file3
```
````

So the typical way of filling your `index` file looks like this:

In [.rst]:

````rst

Sphinx Website
==============

Project Structure
^^^^^^^^^^^^^^^^^

.. toctree
    :caption: Project Structure
    :hidden:

    ../AdaptionGuide
    goal/project_goal


.. toctree
    :caption: Departments
    :hidden:

    departments/departments


.. toctree
    :caption: Sphinx Repositories
    :hidden:

    repositories/repository_list


References
^^^^^^^^^^

.. toctree
    :caption: Annex
    :hidden:

    annex/about_this_website
    annex/license
    annex/getting_started
    annex/contributing
    annex/changelog


.. toctree
    :caption: Indexes
    :hidden:

    genindex

.. toctree
    :caption: Development
    :hidden:

    code.siemens repository <https://code.siemens.com/smo-rs-lmc-en-lm-sc/blueprints/sphinx_website/-/tree/main>
````

Or in [Markdown]:

````md

# Sphinx Website

## Project Structure

```{toctree}
:caption: Project Structure
:hidden:

../AdaptionGuide
goal/project_goal

```

```{toctree}
:caption: Departments
:hidden:

departments/departments

```

```{toctree}
:caption: Sphinx Repositories
:hidden:

repositories/repository_list

```

## References

```{toctree}
:caption: Annex
:hidden:

annex/about_this_website
annex/license
annex/getting_started
annex/contributing
annex/changelog

```

```{toctree}
:caption: Indexes
:hidden:

genindex

```

```{toctree}
:caption: Development
:hidden:

code.siemens repository <https://code.siemens.com/smo-rs-lmc-en-lm-sc/blueprints/sphinx_website/-/tree/main>
```
````

Latter can also be seen in the [furo: index file].

### Sub-chapters in Index

```{attention}
In the Sphinx documentation, we did not find a strategy for sub-chapters was not found.
But all example pages that we had a look at handle sub-chapters like explained below.
```

To generate a subchapter you have to create a second `index` file.
Therefore, create a new subfolder for every sub-chapter.
The subfolder contains the subchapter index file as well as all .md (or .rst) files of this subchapter.
Now one includes all subfiles in the sub-`index`-file and finally includes the sub-index file into a `toctree` of the master `index`-file.

```{note}
By default, the include paths are relative to the index file.
```

## API documentation

To automatically include the [Docstrings] of the corresponding Python package into your [Sphinx] documentation you have to do the following. First, you have to write your Docstrings like it is described by the [Docstrings] chapter. Second, you have to include specify the files you want to include via the [autodoc-extension].

Usually one creates a subfolder `docs/api` with an index file `docs/api/index`. In this index file you specify your code with the following directives:

With [.rst]:

````rst
.. autodata:: MY_CONSTANT

.. autofunction:: my_function

.. autoclass:: MyClass
    :members:

.. automodule:: MyModule
    :members:
````

With [Markdown]:

````md
```{autodata}
MY_CONSTANT
```

```{autofunction}
my_function
```

```{autoclass}
MyClass
:members:
```

```{automodule}
MyModule
:members:
```
````

Those directives give the possibility for a detailed configuration of how the docstrings should be put into your documentation API. In general, it is recommended to use the respective directive for your different objects, so for example use the `autofunction` directive for a `function`. For more details on the details of those directives please have a look at the [autodoc-extension]-website. An example for an API in [Markdown] looks like this:

````md
# Python API

## DataSets

### DataSet

```{eval-rst}
.. autoclass:: convert.DataSets.DataSet
   :members:
```

### DataSetConvert

```{eval-rst}
.. autoclass:: convert.DataSets.DataSetConvert
   :members:
```

### DataSetAnalysis

```{eval-rst}
.. autoclass:: convert.DataSets.DataSetAnalysis
   :members:
```

## DataFolder

### DataFolderAnalysis

```{eval-rst}
.. autoclass:: convert.DataFolder.DataFolderAnalysis
   :members:
```

### DataFolderConvert

```{eval-rst}
.. autoclass:: convert.DataFolder.DataFolderConvert
   :members:
```
````

Or for the `autofunction` directive in [.rst]:

````rst
evolution
---------

parallelplot
^^^^^^^^^^^^

.. autofunction:: opd_plot.parallelplot

lineplot (matplotlib)
^^^^^^^^^^^^^^^^^^^^^

.. autofunction:: opd_plot.lineplot

lineplot (plotly)
^^^^^^^^^^^^^^^^^

.. autofunction:: opd_plot.lineplot_plotly

different_scales_plot
^^^^^^^^^^^^^^^^^^^^^

.. autofunction:: opd_plot.different_scales_plot

````

## Link to the repository

It's generally recommended to have a link to your repository on your website to provide quick access to it. This can be done by adding the following `toctree` to your master `index` file.

```{note}
For several website themes, there may be another solution to have a Link to the repository. But the following method works for all themes
```

````md
```{toctree}
:caption: Development
:hidden:

code.siemens repository <https://code.siemens.com/smo-rs-lmc-en-lm-sc/blueprints/sphinx_website/-/tree/main>
```
````

For example, look at the [furo] website.

## Website Themes in Sphinx

See Section [Themes for Websites][Website_Themes]

## Images / Graphics

### clickable SVG images

```{attention}
The content of this chapter is only for sphinx without the extension myst_parser.
With MySt the syntax is different, see [chapter MySt][MyST_clickable_SVG]
```

```{note}
The disadvantage of the whole system is that first the image is opened and then you can click on the link.
```

To insert clickable SVG images (images that contain links) to sphinx documentation use the following syntax.
The syntax was extracted from this [stack overflow article][img_clickable_svg]

```rst
.. raw:: html

    <object data="myfile.svg" type="image/svg+xml"></object>
```

% Markdown links
[Docstrings]: docstrings.md
[Website_Themes]: ../themes_for_website.md#sphinx
[MyST_clickable_SVG]: ../MyST.md#clickable-svg-images

% External links
[furo]: <https://pradyunsg.me/furo/>
[furo: index file]: <https://github.com/pradyunsg/furo/blob/main/docs/index.md?plain=1>
[autodoc-extension]: <https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#module-sphinx.ext.autodoc>
[Sphinx]: <https://www.sphinx-doc.org/en/master/>
[Markdown]: <https://markdown.de/>
[MySt]: <https://myst-parser.readthedocs.io/en/latest/sphinx/intro.html>
[.rst]: <https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html>
[img_clickable_svg]: <https://stackoverflow.com/questions/34777943/insert-clickable-svg-image-into-sphinx-documentation>
