# Include Sphinx in CI/CD

To include Sphinx in the CI/CD of a repository, one has to modify the `.gitlab-ci.yml` file. So to build the documentation, one needs to execute the command:

```Shell
sphinx-build -b html ./docs public
```

in the CI/CD. The corresponding stage we usually call the `documentation_build`-stage. Of course, to build the documentation, one has to install the `requirements.txt`, which also contains all documentation packages. Second, one must move the documentation files into the `public` folder since GitLab searches for a public folder to link the `pages` website. So this is done by the `pages` stage.

So the final `.gitlab-ci.yml` file could look like this:

```yaml
image: python:3.8
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  CACHE_DIR: ${CI_PROJECT_DIR}/.cache
  REGISTRY_URL: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi

cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  # display Python version
  - python -V
  # set proxy
  - export HTTPS_PROXY="$CODE_PROXY"
  - export HTTP_PROXY="$CODE_PROXY"
  - export NO_PROXY="127.0.0.1,localhost,.siemens.de,.siemens.net,.siemens.com,.siemens.io"
  - export http_proxy="$CODE_PROXY"
  - export https_proxy="$CODE_PROXY"
  - export no_proxy="127.0.0.1,localhost,.siemens.de,.siemens.net,.siemens.com,.siemens.io"
  # prepare virtual environment
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate

stages:
  - documentation_build # build documentation
  - deploy # move documentation to public

documentation_build:
  stage: documentation_build
  script:
    # build Sphinx documentation for any branch and store it in folder site
    - pip --proxy="$CODE_PROXY" install -r requirements.txt
    - sphinx-build -b html ./docs site
  artifacts:
    paths:
      - site/
    expire_in: 1 day
  tags:
    - DOCKER

pages:
  stage: deploy
  script:
    # move Sphinx documentation to public
    - mv site public/
  artifacts:
    paths:
      - public
    expire_in: 1 day
  only:
    - main
  tags:
    - DOCKER
```

Or with a single-stage:

```yaml
stages:
  - deploy

pages:
  stage: deploy
  script:
    # build Sphinx documentation
    - pip --proxy="$CODE_PROXY" install -r requirements.txt
    - sphinx-build -b html ./docs public
  artifacts:
    paths:
      - public
    expire_in: 1 day
  tags:
    - DOCKER
```
