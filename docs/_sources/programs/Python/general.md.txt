# General hints on Python

- install Python from [Python.org][python] in the 64 Bit Version
  - for C-DLLs often 32-Bit version is needed
  - only use established Python versions to have a lower risk of crashes
  - Python Poetry could be the future of package managing

## File encoding

Since sometimes its not clear which file encoding is used one can use [Charded]. [Charded] is a Python package to autoidentify the encoding of a file. Note that one can just determine the file encoding with a certain probability. Example:

```Python
import chardet
rawdata = open(path, "rb").read()
result = chardet.detect(rawdata)
enc = result['encoding']
conf = result["confidence"]

if conf==1.0:
    return enc
elif 0.5<conf<1:
    print(f"Warning: Please control the encoding of the file: {path}\nThe encoding was just determind as {enc} with a probability of {conf*100}.\n")
    return enc
elif conf<=0.5:
    raise ValueError(f"The encoding of the file {path} could not be identified with high enaugh accuracy.\nSo with a confidence of {conf} the file is in {enc} encoded.\nPlease check the encoding and consider to change to  ISO 8859-1.")
```

## pyproject.toml file

This file has a similar task as the `setup.py` file. It usually contains:

```Python
[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"
```

When introducing the `pyproject.toml` one can use the command:

```Shell
pip install .
```

Instead of:

```Shell
python setup.py install
```

Since the first has the advantage that the system gets additionally told to install the `setuptools` in the required version.
The `setuptools` package is used to build Python releases.

For more informations on this you can have a look at this [pyproject.toml file block post].

## Linting

The information presented here was taken from this [excelent tutorial].
In general a linter checks if certain code is written according to the corresponding standard and shows the differences. The most famous linter in Python is [flake8]. [flake8] compares your Python code to the [PEP8 standard], so the most common one for Python, and shows differences to the developer. [black] goes a step further and also formats your code according to the standard. With the advantage that additional spaces or empty lines are automatically be removed. Therefore, [black] conpares the code to something like [PEP8 standard]. Something like because its not 100% [PEP8 Standard] but very close to it. Moreover, [black] relies on a uncompromising formating approach, so its pretty strict on how the code has to look.

To address linting problems before a certain code is commited one can use the [pre-commit framework]. This framework allows to specify an array of different tasks that is performed any time we try to commit new code. If this tasks pass then we can commit, if they fail we must address them before commiting. Those tasks are defined in the `.pre-commit-config.yaml` file. For including [flake8] and [black] this can for example look like:

```yaml
repos:
-   repo: https://github.com/ambv/black
    rev: stable
    hooks:
    - id: black
      language_version: Python3.6
-   repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v1.2.3
    hooks:
    - id: flake8
```

Additionally you can define a `.flake8` file:

```Python
[flake8]
ignore = E203, E266, E501, W503, F403
max-line-length = 79
max-complexity = 18
select = B,C,E,F,W,T4,B9
```

This is mostly important to ignore some common errors with [black].

[Charded]: https://pypi.org/project/chardet/
[pyproject.toml file block post]: https://snarky.ca/what-the-heck-is-pyproject-toml/
[python]: https://www.python.org/
[excelent tutorial]: https://www.earthdatascience.org/blog/unit-testing-linting-ci-python/
[flake8]: https://flake8.pycqa.org/en/latest/
[black]: https://pypi.org/project/black/
