# conventions for SC

In diesem Kapitel werden Commit Konventionen für die Abteilung **SMO RS LMC EN LM SC** beschrieben.

## Festlegung für SC, erarbeitet aus den Quellen unten

Use the scope to define the area of your change.

```text
<type>(<scope>): <subject>
```

Die Folgende Liste mit ***typs*** ist erlaubt:

* **feat**: A new feature
* **fix**: A bug fix
* **docs**: Documentation only changes
* **style**: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
* **refactor**: A code change that neither fixes a bug nor adds a feature
* **perf**: A code change that improves performance
* **test**: Adding missing tests
* **chore**: Changes to the build process or auxiliary tools and libraries such as documentation generation

## von den Railigent Docs

See  [Chapter](./Commit_railigent_docu.md#git-commit-conventions) in the Copy of the Contributing Makrdown file of the Railigent Dokumentation. The Copy was made at 2021.08.19.

## Recherche von Florian Schweiger

There are several ways to write comprehencive commit messages. This [nice block article] gives some very introductive tipps what makes a commit message readable. Also it informs one on how to structure it that GitLab can present it correctly.

[nice block article]: https://chris.beams.io/posts/git-commit/
