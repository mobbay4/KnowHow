# git commands

Here are helpful git commands for daily work.

- [git commands](#git-commands)
  - [Show Branches](#show-branches)
  - [create branch](#create-branch)
  - [delete Branch](#delete-branch)
    - [When and why should a branch be deleted](#when-and-why-should-a-branch-be-deleted)
    - [local](#local)
    - [remote](#remote)
  - [origin](#origin)
    - [move repository to new origin](#move-repository-to-new-origin)
  - [rebase branch](#rebase-branch)
  - [git clone](#git-clone)
    - [to spezific folder](#to-spezific-folder)
  - [reset folders or files](#reset-folders-or-files)
  - [merge](#merge)
    - [savepoint pattern](#savepoint-pattern)
  - [optimize repository](#optimize-repository)
  - [pull multiple repositories](#pull-multiple-repositories)
  - [add & commit](#add--commit)
  - [pushing changes](#pushing-changes)
  - [branching](#branching)
  - [update & merge](#update--merge)
  - [tagging](#tagging)
  - [log](#log)
  - [replace local changes](#replace-local-changes)
  - [links & resources](#links--resources)
    - [guides](#guides)

## Show Branches

To see **all branches**:

```shell
git branch --all
```

To only see the **local branches**:

```shell
git branch
```

## create branch

create a new branch named "feature_x" and switch to it using

```shell
git checkout -b feature_x
```

a branch is not available to others unless you push the branch to your remote repository

```shell
git push origin <branch>
git push --set-upstream origin <branch>
```

## delete Branch

[Help on deleting git branches]

### When and why should a branch be deleted

Information from [delete branch after merging]

**Yes, delete branches after merging them if you don't plan to work with them anymore**
Important to know:

- only the branch gets deleted, all commits in the branch remain in the repository.
- If old branches are not deleted, you never know which branch is active at the moment

### local

```shell
git branch -d <branch>
```

The '-d'option stands for '-delete'and it can be used whenever the branch you want to clean up is completely merged with your upstream branch.

```shell
git branch -D <branch>
```

In this case, the '-D' option stands for '-delete -force' and it is used when your local branches are not merged yet with your remote tracking branches.

### remote

remote branches

```shell
git push <remote> --delete <branch>
```

## origin

reanme the origin (here to old-origin)

```shell
git remote rename origin old-origin
```

set a new origin

```shell
git remote add origin git@code.siemens.com:martin.zaech/lmc_plot.git
```

delete the origin

```shell
git remote remove origin
```

### move repository to new origin

consists of the folloing steps:

- rename the "old" origin
- link to new origin
- push to new origin

```shell
git remote rename origin old-origin
git remote add origin git@code.siemens.com:martin.zaech/lmc_plot.git
git push -u origin --all
git push -u origin --tag
```

## rebase branch

          A---B---C topic
         /
    D---E---F---G master
From this point, the result of either of the following commands:

```shell
git rebase master
git rebase master topic
```

would be:

                  A'--B'--C' topic
                 /
    D---E---F---G master

rebase branch to specific commit

```shell
git rebase --onto 744edf0fa3a28607e4a0253f3fe27281ed7fdcb8
```

make the rebase also for the remnote branch

```shell
git push origin <branch> -f
```

## git clone

create a working copy of a local repository by running the command

```bash
git clone /path/to/repository
```

when using a remote server, your command will be

```bash
git clone username@host:/path/to/repository
```

### to spezific folder

```shell
git clone git@github.com:whatever <folder-name>
```

The comands clones the repo **whatever** in the folder **folder-name**.
With `git clone git@github.com:whatever` the **folder-name** would be also **whatever**.

## reset folders or files

To revert a single file, for example ABC:

```shell
git checkout ABC
```

## merge

### savepoint pattern

[From](http://think-like-a-git.net/sections/testing-out-merges/the-savepoint-pattern.html) adventag: No Merge of test_branch in history.

```shell
git status
git branch savepoint
git status
git merge spiffy_new_feature
```

Happy with the result?
If YES: Delete the savepoint.

```shell
git branch -d savepoint
```

If NO: Reset your branch to the savepoint.

```shell
git reset --hard savepoint
```

## optimize repository

Cleanup unnecessary files and optimize the local repository

```shell
git-gc
```

## pull multiple repositories

The following command pulls all repositories in the current folder.

```bash
for i in */.git; do ( echo $i; cd $i/..; git pull; ); done
```

## add & commit

You can propose changes (add it to the Index) using

```bash
git add <filename>
git add *
```

This is the first step in the basic git workflow. To actually commit these changes use

```bash
git commit -m "Commit message"
```

Now the file is committed to the HEAD, but not in your remote repository yet.

## pushing changes

Your changes are now in the HEAD of your local working copy. To send those changes to your remoterepository, execute

```bash
git push originmaster
```

Change master to whatever branch you want to push your changes to.

If you have not cloned an existing repository and want to connect your repository to a remote server, you need to add it with

```bash
git remote add origin <server>
```

Now you are able to push your changes to the selected remoteserver

## branching

 Branches are used to develop features isolated from each other. The master branch is the "default" branch when you create a repository.
 Use other branches for development and merge them back to the master branch upon completion.

create a new branch named "feature_x" and switch to it using

```bash
git checkout -b feature_x
```

switch back to master

```bash
git checkout master
```

and delete the branch again

```bash
git branch -d feature_x
```

a branch is not available to others unless you push the branch to your remote repository

```bash
git push origin <branch>
```

## update & merge

to update your local repository to the newest commit, execute

```bash
git pull
```

in your working directory to fetch and merge remote changes.
to merge another branch into your active branch (e.g. master),use

```bash
git merge <branch>
```

in both cases git tries to auto-merge changes. Unfortunately, this is not always possible and results inconflicts. You are responsible to merge those conflicts manually by editing the files shown by git. Afterchanging, you need to mark them as merged with

```bash
git add <filename>
```

before merging changes, you can also preview them byusing

```bash
git diff <source_branch> <target_branch>
```

## tagging

it's recommended to create tags for software releases. this is a known concept, which also exists in SVN.You can create a new tag named 1.0.0 by executing

```bash
git tag 1.0.01b2e1d63ff
```

the 1b2e1d63ff stands for the first 10 characters of the commit id you want to reference with your tag. You can get the commit id by looking at the [log](#log)

## log

in its simplest form, you can study repository history using..

```bash
gitlog
```

You can add a lot of parameters to make the log look like what you want. To see only the commits of acertain author:

```bash
git log--author=bob
```

To see a very compressed log where each commit is oneline:

```bash
git log--pretty=oneline
```

Or maybe you want to see an ASCII art tree of all the branches, decorated with the names of tags andbranches:

```bash
git log --graph --oneline --decorate--all
```

See only which files havechanged:

```bash
git log --name -status
```

These are just a few of the possible parameters you can use. For more, see

```bash
git log --help
```

## replace local changes

In case you did something wrong, which for sure never happens ;), you can replace local changes using the command

```bash
git checkout --<filename>
```

this replaces the changes in your working tree with the last content in HEAD. Changes already added tothe index, as well as new files, will be kept.

If you instead want to drop all your local changes and commits, fetch the latest history from the serverand point your local master branch at it like this

```bash
git fetchorigin
git reset --hard origin/master
```

## links & resources

### guides

- [Git Community Book]
- [Pro Git]
- [Think like a git]
- [GitHub Help]
- [A Visual Git Guide]

[Git Community Book]: http://book.git-scm.com/
[Pro Git]:            http://progit.org/book/
[Think like a git]:   http://think-like-a-git.net/
[GitHub Help]:        http://help.github.com/
[A Visual Git Guide]: http://marklodato.github.com/visual-git-guide/index-en.html
[delete branch after merging]: https://stackoverflow.com/questions/10765321/should-i-delete-a-branch-after-merging-it
[Help on deleting git branches]: https://devconnected.com/how-to-clean-up-git-branches/#:~:text=The%20easiest%20way%20to%20delete,the%20%E2%80%9C-d%E2%80%9D%20option.&text=The%20%E2%80%9C-d%E2%80%9D%20option%20stands,merged%20with%20your%20upstream%20branch.&text=%24%20git%20branch%20-d%20release%20Deleted,branch%20feature%20
